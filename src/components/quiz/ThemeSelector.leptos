use leptos::*;

#[derive(Clone, Debug)]
pub struct ColorTheme {
    pub name: String,
    pub primary: String,
    pub secondary: String,
    pub accent: String,
}

#[component]
pub fn ThemeSelector() -> impl IntoView {
    // Define available themes
    let themes = vec![
        ColorTheme {
            name: "Quenti Blue".to_string(),
            primary: "#1a5fff".to_string(),
            secondary: "#ff8b1a".to_string(),
            accent: "#ffc91a".to_string(),
        },
        ColorTheme {
            name: "Forest Green".to_string(),
            primary: "#10b981".to_string(),
            secondary: "#6366f1".to_string(),
            accent: "#fbbf24".to_string(),
        },
        ColorTheme {
            name: "Ruby Red".to_string(),
            primary: "#ef4444".to_string(),
            secondary: "#8b5cf6".to_string(),
            accent: "#f59e0b".to_string(),
        },
        ColorTheme {
            name: "Ocean Blue".to_string(),
            primary: "#0ea5e9".to_string(),
            secondary: "#f43f5e".to_string(),
            accent: "#a3e635".to_string(),
        },
        ColorTheme {
            name: "Purple Haze".to_string(),
            primary: "#8b5cf6".to_string(),
            secondary: "#ec4899".to_string(),
            accent: "#facc15".to_string(),
        },
    ];
    
    let (is_open, set_is_open) = create_signal(false);
    let (current_theme, set_current_theme) = create_signal(themes[0].clone());
    
    // Initialize theme from localStorage if available
    create_effect(move |_| {
        if let Some(window) = web_sys::window() {
            if let Ok(Some(storage)) = window.local_storage() {
                if let Ok(Some(saved_theme)) = storage.get_item("ordo-color-theme") {
                    if let Some(theme) = themes.iter().find(|t| t.name == saved_theme) {
                        set_current_theme.set(theme.clone());
                        apply_theme(theme);
                    }
                }
            }
        }
    });
    
    // Toggle dropdown
    let toggle_dropdown = move |_| {
        set_is_open.update(|open| *open = !*open);
    };
    
    // Select theme
    let select_theme = move |theme: ColorTheme| {
        set_current_theme.set(theme.clone());
        set_is_open.set(false);
        
        // Save to localStorage
        if let Some(window) = web_sys::window() {
            if let Ok(Some(storage)) = window.local_storage() {
                let _ = storage.set_item("ordo-color-theme", &theme.name);
            }
        }
        
        apply_theme(&theme);
    };
    
    view! {
        <div class="theme-selector">
            <button 
                class="theme-selector-toggle"
                on:click=toggle_dropdown
                aria-expanded=move || is_open.get().to_string()
                aria-haspopup="true"
            >
                <span class="theme-selector-current">
                    <span 
                        class="theme-selector-color" 
                        style=move || format!("background-color: {}", current_theme.get().primary)
                    ></span>
                    <span class="theme-selector-name">{move || current_theme.get().name}</span>
                </span>
                <span class="theme-selector-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="m6 9 6 6 6-6"></path>
                    </svg>
                </span>
            </button>
            
            <div 
                class="theme-selector-dropdown"
                class:open=move || is_open.get()
            >
                <For
                    each=move || themes.clone()
                    key=|theme| theme.name.clone()
                    children=move |theme| {
                        let theme_clone = theme.clone();
                        view! {
                            <button 
                                class="theme-selector-option"
                                class:active=move || current_theme.get().name == theme.name
                                on:click=move |_| select_theme(theme_clone.clone())
                            >
                                <span 
                                    class="theme-selector-color" 
                                    style=format!("background-color: {}", theme.primary)
                                ></span>
                                <span class="theme-selector-name">{theme.name}</span>
                            </button>
                        }
                    }
                />
            </div>
        </div>
    }
}

// Apply theme to document
fn apply_theme(theme: &ColorTheme) {
    if let Some(window) = web_sys::window() {
        if let Some(document) = window.document() {
            if let Some(root) = document.document_element() {
                let _ = root.style().set_property("--primary-color", &theme.primary);
                let _ = root.style().set_property("--secondary-color", &theme.secondary);
                let _ = root.style().set_property("--accent-color", &theme.accent);
                
                // Calculate hover and light variants
                let primary_hover = lighten_color(&theme.primary, 10);
                let primary_light = with_opacity(&theme.primary, 0.1);
                let secondary_hover = lighten_color(&theme.secondary, 10);
                let secondary_light = with_opacity(&theme.secondary, 0.1);
                
                let _ = root.style().set_property("--primary-color-hover", &primary_hover);
                let _ = root.style().set_property("--primary-color-light", &primary_light);
                let _ = root.style().set_property("--secondary-color-hover", &secondary_hover);
                let _ = root.style().set_property("--secondary-color-light", &secondary_light);
            }
        }
    }
}

// Helper function to lighten a color
fn lighten_color(hex: &str, percent: i32) -> String {
    if hex.len() < 7 || !hex.starts_with('#') {
        return hex.to_string();
    }
    
    let r = u8::from_str_radix(&hex[1..3], 16).unwrap_or(0) as i32;
    let g = u8::from_str_radix(&hex[3..5], 16).unwrap_or(0) as i32;
    let b = u8::from_str_radix(&hex[5..7], 16).unwrap_or(0) as i32;
    
    let r = ((r as f32) * (1.0 + (percent as f32 / 100.0))).min(255.0) as i32;
    let g = ((g as f32) * (1.0 + (percent as f32 / 100.0))).min(255.0) as i32;
    let b = ((b as f32) * (1.0 + (percent as f32 / 100.0))).min(255.0) as i32;
    
    format!("#{:02x}{:02x}{:02x}", r, g, b)
}

// Helper function to add opacity to a color
fn with_opacity(hex: &str, opacity: f32) -> String {
    if hex.len() < 7 || !hex.starts_with('#') {
        return hex.to_string();
    }
    
    let r = u8::from_str_radix(&hex[1..3], 16).unwrap_or(0);
    let g = u8::from_str_radix(&hex[3..5], 16).unwrap_or(0);
    let b = u8::from_str_radix(&hex[5..7], 16).unwrap_or(0);
    
    format!("rgba({}, {}, {}, {})", r, g, b, opacity)
}
