use std::path::PathBuf;
use std::fs;
use std::collections::{HashMap, HashSet};
use serde::{Serialize, Deserialize};

use crate::output_schema::{UnifiedAnalysisOutput, ApiEndpointInfo};

pub struct ApiMapGenerator;

impl ApiMapGenerator {
    pub fn new() -> Self {
        Self
    }

    pub fn generate(&self, output: &UnifiedAnalysisOutput, output_dir: &PathBuf) -> Result<(), String> {
        println!("Generating API map visualization...");

        // Create output directory if it doesn't exist
        if !output_dir.exists() {
            fs::create_dir_all(output_dir).map_err(|e| format!("Failed to create output directory: {}", e))?;
        }

        // Generate API map as Markdown
        let markdown = self.generate_markdown(output)?;
        let md_path = output_dir.join("api_map.md");
        fs::write(&md_path, markdown)
            .map_err(|e| format!("Failed to write API map markdown: {}", e))?;

        // Generate API map as HTML
        let html = self.generate_html(output)?;
        let html_path = output_dir.join("api_map.html");
        fs::write(&html_path, html)
            .map_err(|e| format!("Failed to write API map HTML: {}", e))?;

        println!("API map visualization generated at:");
        println!("  - Markdown: {}", md_path.display());
        println!("  - HTML: {}", html_path.display());

        Ok(())
    }

    fn generate_markdown(&self, output: &UnifiedAnalysisOutput) -> Result<String, String> {
        let mut markdown = String::new();

        // Header
        markdown.push_str("# API Map\n\n");
        markdown.push_str("This document provides a comprehensive map of all API endpoints in the application.\n\n");

        // Group endpoints by category
        let mut categories = HashMap::new();

        for endpoint in &output.api.endpoints {
            let category = endpoint.controller.clone().unwrap_or_else(|| "Uncategorized".to_string());
            categories.entry(category).or_insert_with(Vec::new).push(endpoint);
        }

        // Generate table of contents
        markdown.push_str("## Table of Contents\n\n");

        for category in categories.keys() {
            markdown.push_str(&format!("- [{}](#{})\n", category, self.to_anchor(category)));
        }

        markdown.push_str("\n");

        // Generate API documentation by category
        for (category, endpoints) in &categories {
            markdown.push_str(&format!("## {}\n\n", category));

            // Create a table for each HTTP method
            let mut methods = HashMap::new();

            for endpoint in endpoints {
                methods.entry(&endpoint.http_method).or_insert_with(Vec::new).push(endpoint);
            }

            for (method, method_endpoints) in &methods {
                markdown.push_str(&format!("### {} Endpoints\n\n", method));

                // Create table
                markdown.push_str("| Path | Description | Auth Required | Parameters |\n");
                markdown.push_str("|------|-------------|--------------|------------|\n");

                for endpoint in method_endpoints {
                    let auth_required = if endpoint.auth_required { "Yes" } else { "No" };
                    let params = endpoint.request_params.join(", ");

                    markdown.push_str(&format!("| `{}` | {} | {} | {} |\n",
                        endpoint.path,
                        endpoint.description.clone().unwrap_or_default(),
                        auth_required,
                        params
                    ));
                }

                markdown.push_str("\n");
            }
        }

        // Generate Mermaid diagram
        markdown.push_str("## API Flow Diagram\n\n");
        markdown.push_str("```mermaid\ngraph LR\n");

        // Add client node
        markdown.push_str("    Client[Client]\n");

        // Add API endpoints
        for endpoint in &output.api.endpoints {
            let node_id = self.path_to_id(&endpoint.path);
            let method = &endpoint.http_method;

            markdown.push_str(&format!("    {}[\"{} {}\"]\n", node_id, method, endpoint.path));

            // Connect client to endpoint
            markdown.push_str(&format!("    Client --> {}\n", node_id));

            // Connect endpoint to controller if available
            if let Some(controller) = &endpoint.controller {
                let controller_id = self.sanitize_id(controller);

                markdown.push_str(&format!("    {}[\"{}\"]\n", controller_id, controller));
                markdown.push_str(&format!("    {} --> {}\n", node_id, controller_id));
            }
        }

        markdown.push_str("```\n");

        Ok(markdown)
    }

    fn generate_html(&self, output: &UnifiedAnalysisOutput) -> Result<String, String> {
        // Group endpoints by category
        let mut categories = HashMap::new();

        for endpoint in &output.api.endpoints {
            let category = endpoint.controller.clone().unwrap_or_else(|| "Uncategorized".to_string());
            categories.entry(category).or_insert_with(Vec::new).push(endpoint);
        }

        // Generate HTML
        let mut html = String::new();

        // Load template file
        let template_path = "src/generators/templates/api_map_template.html";
        let template = match fs::read_to_string(template_path) {
            Ok(content) => content,
            Err(_) => {
                // Fallback to embedded template if file not found
                include_str!("templates/api_map_template.html").to_string()
            }
        };

        // Find the method filters placeholder
        let method_filters_placeholder = "<!-- METHOD_FILTERS_PLACEHOLDER -->";
        let categories_placeholder = "<!-- CATEGORIES_PLACEHOLDER -->";

        // Split the template at the placeholders
        let parts: Vec<&str> = template.split(method_filters_placeholder).collect();
        if parts.len() != 2 {
            return Err("Invalid template format: missing method filters placeholder".to_string());
        }

        let header = parts[0];
        let rest = parts[1];

        let parts: Vec<&str> = rest.split(categories_placeholder).collect();
        if parts.len() != 2 {
            return Err("Invalid template format: missing categories placeholder".to_string());
        }

        let middle = parts[0];
        let footer = parts[1];

        // Start building the HTML
        html.push_str(header);

        // Add method filters
        let mut methods = HashSet::new();
        for endpoint in &output.api.endpoints {
            methods.insert(endpoint.http_method.clone());
        }
        for method in methods {
            html.push_str(&format!(r#"<div class="filter-option" data-method="{}">{}</div>
"#, 
                method.to_lowercase(), method));
        }

        html.push_str(middle);

        // Generate API documentation by category
        let mut categories_html = String::new();
        for (category, endpoints) in &categories {
            categories_html.push_str(&format!(r#"<div class="category" id="{}">
    <h2>{}</h2>
"#, self.to_anchor(category), category));

            // Group by HTTP method
            let mut methods = HashMap::new();

            for endpoint in endpoints {
                methods.entry(&endpoint.http_method).or_insert_with(Vec::new).push(endpoint);
            }

            for (method, method_endpoints) in &methods {
                let method_class = format!("method-{}", method.to_lowercase());

                categories_html.push_str(&format!(r#"    <div class="method-group">
        <div class="method-header {}">
            {} Endpoints
        </div>
"#, method_class, method));

                for endpoint in method_endpoints {
                    let auth_class = if endpoint.auth_required { "auth-required" } else { "auth-optional" };
                    let auth_text = if endpoint.auth_required { "Auth Required" } else { "Auth Optional" };
                    let auth_badge = format!(r#"<span class="badge {}">{}</span>"#, auth_class, auth_text);

                    categories_html.push_str(&format!(r#"        <div class="endpoint" data-method="{}" data-auth="{}">
            <div class="endpoint-header">
                <span class="endpoint-path">{}</span>
                {}
            </div>
            <div class="endpoint-details">
                <p>{}</p>
"#,
                        method.to_lowercase(),
                        if endpoint.auth_required { "required" } else { "optional" },
                        endpoint.path,
                        auth_badge,
                        endpoint.description.clone().unwrap_or_default()));

                    if !endpoint.request_params.is_empty() {
                        categories_html.push_str(r#"                <h4>Parameters</h4>
                <table class="params-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
"#);

                        for param in &endpoint.request_params {
                            categories_html.push_str(&format!(r#"                        <tr>
                            <td>{}</td>
                        </tr>
"#, param));
                        }

                        categories_html.push_str(r#"                    </tbody>
                </table>
"#);
                    }

                    if let Some(controller) = &endpoint.controller {
                        categories_html.push_str(&format!(r#"                <h4>Controller</h4>
                <p>{}</p>
"#, controller));
                    }

                    categories_html.push_str(r#"            </div>
        </div>
"#);
                }

                categories_html.push_str(r#"    </div>
"#);
            }

            categories_html.push_str(r#"</div>
"#);
        }

        html.push_str(&categories_html);
        html.push_str(footer);

        Ok(html)
    }

    fn to_anchor(&self, text: &str) -> String {
        text.to_lowercase()
            .replace(" ", "-")
            .replace("&", "and")
            .chars()
            .filter(|c| c.is_alphanumeric() || *c == '-')
            .collect()
    }

    fn path_to_id(&self, path: &str) -> String {
        path.replace("/", "_")
            .replace("{", "")
            .replace("}", "")
            .replace(":", "")
            .replace(".", "_")
            .replace("-", "_")
    }

    fn sanitize_id(&self, text: &str) -> String {
        text.replace(" ", "_")
            .chars()
            .filter(|c| c.is_alphanumeric() || *c == '_')
            .collect()
    }
}
